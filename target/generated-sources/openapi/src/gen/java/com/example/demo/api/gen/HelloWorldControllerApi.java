/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api.gen;

import com.example.demo.model.gen.HelloResponse;
import com.example.demo.model.gen.InfoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "hello-world-controller", description = "Hello World Controller")
public interface HelloWorldControllerApi {

    /**
     * GET /api/info : Get application info
     * Returns information about the application configuration
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getInfo",
        summary = "Get application info",
        description = "Returns information about the application configuration",
        tags = { "hello-world-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InfoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/info",
        produces = { "application/json" }
    )
    
    ResponseEntity<InfoResponse> getInfo(
        
    );


    /**
     * GET /api/hello : Get a hello message
     * Returns a greeting message with the provided name or a default greeting
     *
     * @param name Name to be greeted (optional, default to World)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "sayHello",
        summary = "Get a hello message",
        description = "Returns a greeting message with the provided name or a default greeting",
        tags = { "hello-world-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HelloResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/hello",
        produces = { "application/json" }
    )
    
    ResponseEntity<HelloResponse> sayHello(
        @Parameter(name = "name", description = "Name to be greeted", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false, defaultValue = "World") String name
    );

}
